//    MIT NON-AI License
//
//    Copyright (c) 2022-2024 Aleksei Kotelnikov(gudron2s@gmail.com)
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy of the software and associated documentation files (the "Software"),
//    to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
//    and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions.
//
//    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//    In addition, the following restrictions apply:
//
//    1. The Software and any modifications made to it may not be used for the purpose of training or improving machine learning algorithms,
//    including but not limited to artificial intelligence, natural language processing, or data mining. This condition applies to any derivatives,
//    modifications, or updates based on the Software code. Any usage of the Software in an AI-training dataset is considered a breach of this License.
//
//    2. The Software may not be included in any dataset used for training or improving machine learning algorithms,
//    including but not limited to artificial intelligence, natural language processing, or data mining.
//
//    3. Any person or organization found to be in violation of these restrictions will be subject to legal action and may be held liable
//    for any damages resulting from such use.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
//    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.2
// source: ethereum.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address - slice of bytes with go-ethereum common.Address type - go-ethereum/common/types.go
	Address []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	// Address - slice of slice of bytes with go-ethereum common.Hash type - go-ethereum/common/types.go
	StorageKeys [][]byte `protobuf:"bytes,2,rep,name=StorageKeys,proto3" json:"StorageKeys,omitempty"`
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_ethereum_proto_rawDescGZIP(), []int{0}
}

func (x *AccessTuple) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessTuple) GetStorageKeys() [][]byte {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type SignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// V - slice of bytes from big.Int
	V []byte `protobuf:"bytes,1,opt,name=V,proto3" json:"V,omitempty"`
	// R - slice of bytes from big.Int
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	// S - slice of bytes from big.Int
	S []byte `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
}

func (x *SignatureData) Reset() {
	*x = SignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureData) ProtoMessage() {}

func (x *SignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureData.ProtoReflect.Descriptor instead.
func (*SignatureData) Descriptor() ([]byte, []int) {
	return file_ethereum_proto_rawDescGZIP(), []int{1}
}

func (x *SignatureData) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *SignatureData) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *SignatureData) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type LegacyTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce uint64 `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// GasPrice - slice of bytes from big.Int
	GasPrice []byte `protobuf:"bytes,2,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasLimit uint64 `protobuf:"varint,3,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	// Address - slice of bytes with go-ethereum common.Address type - go-ethereum/common/types.go
	ToAddress []byte `protobuf:"bytes,4,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	// Value - slice of bytes from big.Int
	Value          []byte         `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Data           []byte         `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	SignParameters *SignatureData `protobuf:"bytes,7,opt,name=SignParameters,proto3" json:"SignParameters,omitempty"`
}

func (x *LegacyTxData) Reset() {
	*x = LegacyTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyTxData) ProtoMessage() {}

func (x *LegacyTxData) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyTxData.ProtoReflect.Descriptor instead.
func (*LegacyTxData) Descriptor() ([]byte, []int) {
	return file_ethereum_proto_rawDescGZIP(), []int{2}
}

func (x *LegacyTxData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *LegacyTxData) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *LegacyTxData) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *LegacyTxData) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *LegacyTxData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LegacyTxData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LegacyTxData) GetSignParameters() *SignatureData {
	if x != nil {
		return x.SignParameters
	}
	return nil
}

type DynamicFeeTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChainID - slice of bytes from big.Int
	ChainID []byte `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// GasTipCap - slice of bytes from big.Int a.k.a. maxPriorityFeePerGas
	GasTipCap []byte `protobuf:"bytes,3,opt,name=GasTipCap,proto3" json:"GasTipCap,omitempty"`
	// GasPrice - slice of bytes from big.Int a.k.a. maxFeePerGas
	GasFeeCap []byte `protobuf:"bytes,4,opt,name=GasFeeCap,proto3" json:"GasFeeCap,omitempty"`
	GasLimit  uint64 `protobuf:"varint,5,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	// Address - slice of bytes with go-ethereum common.Address type - go-ethereum/common/types.go
	ToAddress []byte `protobuf:"bytes,6,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	// Value - slice of bytes from big.Int
	Value          []byte         `protobuf:"bytes,7,opt,name=Value,proto3" json:"Value,omitempty"`
	Data           []byte         `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
	AccessList     []*AccessTuple `protobuf:"bytes,9,rep,name=AccessList,proto3" json:"AccessList,omitempty"`
	SignParameters *SignatureData `protobuf:"bytes,10,opt,name=SignParameters,proto3" json:"SignParameters,omitempty"`
}

func (x *DynamicFeeTxData) Reset() {
	*x = DynamicFeeTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFeeTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFeeTxData) ProtoMessage() {}

func (x *DynamicFeeTxData) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFeeTxData.ProtoReflect.Descriptor instead.
func (*DynamicFeeTxData) Descriptor() ([]byte, []int) {
	return file_ethereum_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicFeeTxData) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *DynamicFeeTxData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DynamicFeeTxData) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *DynamicFeeTxData) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *DynamicFeeTxData) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *DynamicFeeTxData) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *DynamicFeeTxData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicFeeTxData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DynamicFeeTxData) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *DynamicFeeTxData) GetSignParameters() *SignatureData {
	if x != nil {
		return x.SignParameters
	}
	return nil
}

type AccessListTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChainID - slice of bytes from big.Int
	ChainID []byte `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Nonce   uint64 `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	// GasPrice - slice of bytes from big.Int
	GasPrice []byte `protobuf:"bytes,3,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasLimit uint64 `protobuf:"varint,4,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	// Address - slice of bytes with go-ethereum common.Address type - go-ethereum/common/types.go
	ToAddress []byte `protobuf:"bytes,5,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	// Value - slice of bytes from big.Int
	Value          []byte         `protobuf:"bytes,6,opt,name=Value,proto3" json:"Value,omitempty"`
	Data           []byte         `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
	AccessList     []*AccessTuple `protobuf:"bytes,8,rep,name=AccessList,proto3" json:"AccessList,omitempty"`
	SignParameters *SignatureData `protobuf:"bytes,9,opt,name=SignParameters,proto3" json:"SignParameters,omitempty"`
}

func (x *AccessListTxData) Reset() {
	*x = AccessListTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethereum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessListTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListTxData) ProtoMessage() {}

func (x *AccessListTxData) ProtoReflect() protoreflect.Message {
	mi := &file_ethereum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListTxData.ProtoReflect.Descriptor instead.
func (*AccessListTxData) Descriptor() ([]byte, []int) {
	return file_ethereum_proto_rawDescGZIP(), []int{4}
}

func (x *AccessListTxData) GetChainID() []byte {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *AccessListTxData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccessListTxData) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *AccessListTxData) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AccessListTxData) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *AccessListTxData) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccessListTxData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccessListTxData) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *AccessListTxData) GetSignParameters() *SignatureData {
	if x != nil {
		return x.SignParameters
	}
	return nil
}

var File_ethereum_proto protoreflect.FileDescriptor

var file_ethereum_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0x49, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x56, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x56, 0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x52, 0x12, 0x0c, 0x0a, 0x01, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x53,
	0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x47, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x61, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x47, 0x61,
	0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x62,
	0x63, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2d, 0x65, 0x74, 0x68, 0x2d, 0x68, 0x64, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethereum_proto_rawDescOnce sync.Once
	file_ethereum_proto_rawDescData = file_ethereum_proto_rawDesc
)

func file_ethereum_proto_rawDescGZIP() []byte {
	file_ethereum_proto_rawDescOnce.Do(func() {
		file_ethereum_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethereum_proto_rawDescData)
	})
	return file_ethereum_proto_rawDescData
}

var file_ethereum_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ethereum_proto_goTypes = []interface{}{
	(*AccessTuple)(nil),      // 0: ethereum.AccessTuple
	(*SignatureData)(nil),    // 1: ethereum.SignatureData
	(*LegacyTxData)(nil),     // 2: ethereum.LegacyTxData
	(*DynamicFeeTxData)(nil), // 3: ethereum.DynamicFeeTxData
	(*AccessListTxData)(nil), // 4: ethereum.AccessListTxData
}
var file_ethereum_proto_depIdxs = []int32{
	1, // 0: ethereum.LegacyTxData.SignParameters:type_name -> ethereum.SignatureData
	0, // 1: ethereum.DynamicFeeTxData.AccessList:type_name -> ethereum.AccessTuple
	1, // 2: ethereum.DynamicFeeTxData.SignParameters:type_name -> ethereum.SignatureData
	0, // 3: ethereum.AccessListTxData.AccessList:type_name -> ethereum.AccessTuple
	1, // 4: ethereum.AccessListTxData.SignParameters:type_name -> ethereum.SignatureData
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ethereum_proto_init() }
func file_ethereum_proto_init() {
	if File_ethereum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ethereum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFeeTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethereum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessListTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethereum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ethereum_proto_goTypes,
		DependencyIndexes: file_ethereum_proto_depIdxs,
		MessageInfos:      file_ethereum_proto_msgTypes,
	}.Build()
	File_ethereum_proto = out.File
	file_ethereum_proto_rawDesc = nil
	file_ethereum_proto_goTypes = nil
	file_ethereum_proto_depIdxs = nil
}
